  let tick model =
    let open Async in
    Clock.every (sec 0.5) (fun () -> Vdom.print model)
  (* let open Text in
     let model = Var.create st (Model.of_tuple (Termutils.tsize ())) in
     let model_w = Var.watch model in
     let model_v = view model_w in
     let model_o = observe model_v in
     let sigwinch = Signal.of_caml_int 28 in
     Signal.handle [ sigwinch ] ~f:(fun _ ->
     Incremental.Var.set model (Model.of_tuple (Action.apply `SIGWINCH));
     stabilize st;
     Writer.write stdout (Observer.value_exn model_o)) *)
end

["black@bonez\n";
"----------\n";
"OS: Arch Linux x86_64\n";
"Host: 80MK Lenovo YOGA 900-13ISK\n";
"Kernel: 4.14.10-1-Arch\n";
"Uptime: 4 hours, 32 mins\n";
"Packages: 713\n";
"Shell: bash 4.4.12\n";
"WM: Openbox\n";
"WM Theme: Thicc\n";
"Theme: Lumiere [GTK2/3]\n";
"Icons: Paper [GTK2/3]\n";
"Terminal: xfce4-terminal\n";
"Terminal Font: Roboto Mono 12\n";
"CPU: Intel i7-6500U (4) @ 3.100GHz\n";
"GPU: Intel HD Graphics 520\n";
"Memory: 1933MiB / 7890 MiB"]

(* let shutdown () =
   let open Core_unix in
   let fd = File_descr.of_int 0 in
   let stdin = Terminal_io.tcgetattr fd in
   stdin.c_icanon <- true;
   stdin.c_echo <- true;
   Terminal_io.tcsetattr stdin fd ~mode:TCSANOW;
   Termutils.scursor ();
   exit 0
   ;; *)